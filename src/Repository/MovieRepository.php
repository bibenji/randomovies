<?php

namespace Randomovies\Repository;

/**
 * MovieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovieRepository extends \Doctrine\ORM\EntityRepository
{
	public function getOrderedMoviesByTitle($startAt = 0, $endAt = 6, $params = [])
	{
        $select = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('m')
            ->from('Randomovies:Movie', 'm')
            ->where('m.title != \'\'')
            ->orderBy('m.title', 'ASC')
            ->setFirstResult($startAt)
            ->setMaxResults($endAt)
        ;

        if (isset($params['tag'])) {
            $select
                ->leftJoin('m.tags', 't')
                ->andWhere('t.id = :tag_id')
                ->setParameter('tag_id', $params['tag'])
            ;
        }

        if (isset($params['users_rating'])) {

            $qb = $this->createQueryBuilder('movie');

            $subSelect = $qb
                ->select('movie')
                ->groupBy('movie')
                ->leftJoin('movie.comments', 'comment')
                ->where('movie.title != \'\'')
                ->having('AVG(comment.note) >= :users_rating_sup AND AVG(comment.note) < :users_rating_inf')
                ->setParameter('users_rating_sup', (int) $params['users_rating'] - 0.5)
                ->setParameter('users_rating_inf', (int) $params['users_rating'] + 0.5)
                ->getQuery()
            ;

            $select
                ->andWhere($qb->expr()->in('m', $subSelect->getDQL()))
                ->setParameter('users_rating_sup', (int) $params['users_rating'] - 0.5)
                ->setParameter('users_rating_inf', (int) $params['users_rating'] + 0.5)
            ;
        }

        if (isset($params['rating'])) {
            $select
                ->andWhere('m.rating = :rating')
                ->setParameter('rating', $params['rating'])
            ;
        }

        return $select
            ->getQuery()
            ->getResult()
        ;
	}

	public function getRandomMovies($nb = 4)
    {
        $results = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('m')
            ->from('Randomovies:Movie', 'm')
            ->orderBy('m.title', 'ASC')
            ->getQuery()
            ->getResult()
        ;

            
        
        $fourMovies = [];
        
        if (count($results) > 5) {
        	$fourRandoNb = [];
        	
        	while (count($fourRandoNb) !== 5) {
        		$randoNb = mt_rand(0, count($results)-1);
        		if (!(in_array($randoNb, $fourRandoNb))) {
        			$fourRandoNb[] = $randoNb;
        		}
        	}
        	
        	foreach($fourRandoNb as $oneRandoNb) {
        		$fourMovies[] = $results[$oneRandoNb];
        	}
        }        

        return $fourMovies;
    }

    public function getDistinctCategories()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('m.genre')
            ->from('Randomovies:Movie', 'm')
            ->orderBy('m.genre', 'asc')
            ->distinct()
            ->getQuery()
            ->getResult()
        ;
    }

    public function getTotalMovies($params = [])
    {
        $select = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('COUNT(m)')
            ->from('Randomovies:Movie', 'm')
            ->where('m.title != \'\'')
        ;

        if (isset($params['tag'])) {
            $select
                ->leftJoin('m.tags', 't')
                ->andWhere('t.id = :tag_id')
                ->setParameter('tag_id', $params['tag'])
            ;
        }

        if (isset($params['users_rating'])) {

            $qb = $this->createQueryBuilder('movie');

            $subSelect = $qb
                ->select('movie')
                ->groupBy('movie')
                ->leftJoin('movie.comments', 'comment')
                ->where('movie.title != \'\'')
                ->having('AVG(comment.note) >= :users_rating_sup AND AVG(comment.note) < :users_rating_inf')
                ->setParameter('users_rating_sup', (int) $params['users_rating'] - 0.5)
                ->setParameter('users_rating_inf', (int) $params['users_rating'] + 0.5)
                ->getQuery()
            ;

            $select
                ->andWhere($qb->expr()->in('m', $subSelect->getDQL()))
                ->setParameter('users_rating_sup', (int) $params['users_rating'] - 0.5)
                ->setParameter('users_rating_inf', (int) $params['users_rating'] + 0.5)
            ;
        }

        if (isset($params['rating'])) {
            $select
                ->andWhere('m.rating = :rating')
                ->setParameter('rating', $params['rating'])
            ;
        }

        return $select
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }
	
    /**
     * Used for ETL
     * 
     * @param unknown $min
     * @param unknown $max
     * @return mixed|\Doctrine\DBAL\Driver\Statement|array|NULL
     */
    public function getMoviesForETL($min, $max)
    {
        return $this->createQueryBuilder('m')
        	->setFirstResult($min)
        	->setMaxResults($max)            
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * Used for ETL
     * 
     * @return mixed|\Doctrine\DBAL\Driver\Statement|array|NULL
     */
    public function getMaxMoviesId()
    {
        return $this->createQueryBuilder('m')
            ->select('COUNT(m)')
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }
    
    public function getMoviesWithIds(array $ids)
    {
    	if (count($ids) < 1) {
    		return [];
    	}
    	
    	$qb = $this->createQueryBuilder('m');
    	return $qb
    		->select('m')
    		->where(
    			$qb->expr()->in('m.id', $ids)
    		)
    		->getQuery()
    		->getResult()
    	;    	
    }
}
